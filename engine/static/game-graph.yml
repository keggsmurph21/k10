---
# NB: "f" is for "flags" (check)
# NB: execute() should return an <int>! (default 0)

- ACCEPT_TRADE:
    nodes:
      - [OFFER_TRADE, ACCEPT_TRADE]
    check: "flags.is_trade_accepted"
    extra_args: []
    execute: "accept_trade_as_offerer(game, player)"
    is_priority: true
    is_multi_person: true
    is_cancel: false
    is_admin_only: false

- ACCEPT_TRADE_OTHER:
    nodes:
      - [END_TURN, ACCEPT_TRADE_OTHER]
    check: "flags.can_accept_trade"
    extra_args: []
    execute: "accept_trade_as_acceptor(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- AFTER_DISCARD_OTHER:
    nodes:
      - [DISCARD_OTHER, END_TURN]
    check: "true"
    extra_args: []
    execute: null
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- AFTER_TRADE_OTHER:
    nodes:
      - [ACCEPT_TRADE_OTHER, END_TURN]
    check: "true"
    extra_args: []
    execute: null
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- BUILD_CITY:
    nodes:
      - [ROOT, FORTIFY]
    check: "flags.has_rolled && flags.can_build_city"
    extra_args: ["Settlement s"]
    execute: "fortify(game, player, s)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- BUILD_ROAD:
    nodes:
      - [ROOT, PAVE]
    check: "flags.has_rolled && flags.can_build_road"
    extra_args: ["Road r"]
    execute: "pave(game, player, r)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- BUILD_SETTLEMENT:
    nodes:
      - [ROOT, SETTLE]
    check: "flags.has_rolled && flags.can_build_settlement"
    extra_args: ["Settlement s"]
    execute: "settle(game, player, s)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- BUY_DEVELOPMENT_CARD:
    nodes:
      - [ROOT, BUY_DEVELOPMENT_CARD]
    check: "flags.has_rolled && flags.can_buy_development_card"
    extra_args: []
    execute: "buy_development_card(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- CANCEL_TRADE:
    nodes:
      - [OFFER_TRADE, ROOT]
    check: "true"
    extra_args: []
    execute: "cancel_trade(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: true
    is_admin_only: false

- DECLINE_TRADE:
    nodes:
      - [END_TURN, END_TURN]
    check: "flags.can_accept_trade"
    extra_args: []
    execute: "decline_trade(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- DISCARD_MOVE_ROBBER:
    nodes:
      - [DISCARD, MOVE_ROBBER]
    check: "flags.is_current_player && flags.is_roll_seven && !flags.should_wait_for_discard"
    extra_args: ["Hex h"]
    execute: "move_robber(game, player, h)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- END_GAME:
    nodes:
      - [BUY_DEVELOPMENT_CARD, END_GAME]
      - [FORTIFY, END_GAME]
      - [PAVE, END_GAME]
      - [PLAY_KNIGHT, END_GAME]
      - [PLAY_VICTORY_POINT, END_GAME]
      - [SETTLE, END_GAME]
    check: "flags.is_game_over"
    extra_args: []
    execute: "end(game)"
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- END_INIT:
    nodes:
      - [PAVE, END_TURN]
    check: "flags.is_first_round || flags.is_second_round"
    extra_args: []
    execute: "iterate_round(game, player)"
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- END_TURN:
    nodes:
      - [ROOT, END_TURN]
    check: "flags.has_rolled"
    extra_args: []
    execute: "iterate_round(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- FAIL_TRADE:
    nodes:
      - [OFFER_TRADE, ROOT]
    check: "!flags.should_wait_for_trade"
    extra_args: []
    execute: "fail_trade(game, player)"
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- INIT_BUILD_ROAD:
    nodes:
      - [SETTLE, PAVE]
    check: "flags.is_first_round"
    extra_args: ["Road r"]
    execute: "init_pave(game, player, r)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- INIT_COLLECT:
    nodes:
      - [SETTLE, INIT_COLLECT]
    check: "flags.is_second_round"
    extra_args: []
    execute: "init_collect(game, player)"
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- INIT_SETTLE:
    nodes:
      - [ROOT, SETTLE]
    check: "flags.is_first_round || flags.is_second_round"
    extra_args: ["Settlement s"]
    execute: "init_settle(game, player, s)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- INIT2_BUILD_ROAD:
    nodes:
      - [INIT_COLLECT, PAVE]
    check: "flags.is_second_round"
    extra_args: ["Road r"]
    execute: "init_pave(game, player, r)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- NO_STEAL_ROBBER:
    nodes:
      - [MOVE_ROBBER, ROOT]
    check: "!flags.can_steal"
    extra_args: []
    execute: null
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- OFFER_TRADE:
    nodes:
      - [ROOT, OFFER_TRADE]
    check: "!flags.is_first_round && !flags.is_second_round && flags.has_rolled && flags.can_trade"
    extra_args: ["Trade t"]
    execute: "offer_trade(game, player, t)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- PLAY_KNIGHT:
    nodes:
      - [ROOT, MOVE_ROBBER]
    check: "flags.can_play_knight"
    extra_args: ["Hex h"]
    execute: "play_knight(game, player, h)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- PLAY_MONOPOLY:
    nodes:
      - [ROOT, PLAY_MONOPOLY]
    check: "flags.can_play_monopoly"
    extra_args: ["Resource r"]
    execute: "play_monopoly(game, player, r)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- PLAY_ROAD_BUILDING:
    nodes:
      - [ROOT, PLAY_ROAD_BUILDING]
    check: "flags.can_play_road_building"
    extra_args: ["Road r1", "Road r2"]
    execute: "play_road_building(game, player, r1, r2)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- PLAY_VICTORY_POINT:
    nodes:
      - [ROOT, PLAY_VICTORY_POINT]
    check: "flags.can_play_victory_point"
    extra_args: []
    execute: "play_victory_point(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- PLAY_YEAR_OF_PLENTY:
    nodes:
      - [ROOT, PLAY_YEAR_OF_PLENTY]
    check: "flags.can_play_year_of_plenty"
    extra_args: ["Resource r1", "Resource r2"]
    execute: "play_year_of_plenty(game, player, r1, r2)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- ROLL:
    nodes:
      - [ROOT, ROLL]
    check: "!flags.has_rolled && !flags.is_first_round && !flags.is_second_round"
    extra_args: []
    execute: "return roll(game, player)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- ROLL_EXACT:
    nodes:
      - [ROOT, ROLL]
    check: "!flags.has_rolled && !flags.is_first_round && !flags.is_second_round"
    extra_args: ["int _roll"]
    execute: "return roll(game, player, _roll)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: true

- ROLL_COLLECT:
    nodes:
      - [ROLL, COLLECT]
    check: "!flags.is_roll_seven"
    extra_args: []
    execute: "collect_resources(game)"
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- ROLL_DISCARD:
    nodes:
      - [DISCARD, DISCARD]
      - [ROLL, DISCARD]
    check: "flags.num_to_discard > 0"
    extra_args: ["Trade t"]
    execute: "discard(game, player, t.out)"
    is_priority: false
    is_multi_person: true
    is_cancel: false
    is_admin_only: false

- ROLL_DISCARD_OTHER:
    nodes:
      - [DISCARD_OTHER, DISCARD_OTHER]
      - [END_TURN, DISCARD_OTHER]
    check: "flags.num_to_discard > 0"
    extra_args: ["Trade t"]
    execute: "discard(game, player, t.out)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- ROLL_MOVE_ROBBER:
    nodes:
      - [ROLL, MOVE_ROBBER]
    check: "flags.is_current_player && flags.is_roll_seven && !flags.should_wait_for_discard"
    extra_args: ["Hex h"]
    execute: "move_robber(game, player, h)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- STEAL_ROBBER:
    nodes:
      - [MOVE_ROBBER, STEAL]
    check: "flags.can_steal"
    extra_args: ["Player Z"]
    execute: "steal(game, player, Z)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- TAKE_TURN:
    nodes:
      - [END_TURN, ROOT]
    check: "flags.is_current_player"
    extra_args: []
    execute: null
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- TO_ROOT:
    nodes:
      - [ACCEPT_TRADE, ROOT]
      - [BUY_DEVELOPMENT_CARD, ROOT]
      - [COLLECT, ROOT]
      - [FORTIFY, ROOT]
      - [PAVE, ROOT]
      - [PLAY_MONOPOLY, ROOT]
      - [PLAY_ROAD_BUILDING, ROOT]
      - [PLAY_VICTORY_POINT, ROOT]
      - [PLAY_YEAR_OF_PLENTY, ROOT]
      - [SETTLE, ROOT]
      - [STEAL, ROOT]
      - [TRADE_WITH_BANK, ROOT]
    check: "!flags.is_first_round"
    extra_args: []
    execute: null
    is_priority: true
    is_multi_person: false
    is_cancel: false
    is_admin_only: false

- TRADE_WITH_BANK:
    nodes:
      - [ROOT, TRADE_WITH_BANK]
    check: "!flags.is_first_round && !flags.is_second_round && flags.has_rolled && flags.can_trade_with_bank"
    extra_args: ["Trade t"]
    execute: "trade_with_bank(game, player, t)"
    is_priority: false
    is_multi_person: false
    is_cancel: false
    is_admin_only: false
...
